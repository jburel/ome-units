{% python

from operator import add
from operator import sub

powers = (
    ("YOTTA", 24),
    ("ZETTA", 21),
    ("EXA", 18),
    ("PETA", 15),
    ("TERA", 12),
    ("GIGA", 9),
    ("MEGA", 6),
    ("K", 3),
    ("H", 2),
    ("DA", 1),
    ("D", -1),
    ("C", -2),
    ("M", -3),
    ("MICRO", -6),
    ("N", -9),
    ("P", -12),
    ("F", -15),
    ("A", -18),
    ("Z", -21),
    ("Y", -24),
)

endings = {
    "ElectricPotential": "V",
    "Frequency": "HZ",
    "Length": "M",
    "Power": "W",
    "Pressure": "PA",
    "Time": "S",
}

def coefficients(name, items2, items3):
    """
    Method which attempts to choose the best
    conversion between two units. This is
    usually on possible if they are both
    regularly named units in the SI system.
    """

    if items2 == items3 and False: # FIXME
        return ","

    power = 0
    found = 0

    ending = endings.get(name)
    if not ending:
        return "UNKNOWN"

    for code, sign in ((items2.CODE, add), (items3.CODE, sub)):
        for sym, val in powers:
            if code.startswith(sym) \
                and code.endswith(ending) \
                and len(code) == len(sym) + len(ending):
                power = sign(power, val)
                found += 1
                break
            elif code == ending:
                # This is the prefixless case
                found += 1
                break

    if found == 2:  # Found both
        return "(%s, %s), (%s, %s)" % (0, 1, 10, power)
    elif found < 2:
        return "(X, Y), (Z, W) <==== FIXME"
    else:
        return "(X, Y), (Z, W) <====== TOOMANY:%s" % found

items = sorted(items.items())
items = [x for x in items if x[0] != "Fields"]

%}

Conversions = {
{% for name, item in items %}\
  "${name}": {
{% for item2 in sorted(item) %}\
    "${item2.CODE}": {
{% for item3 in sorted(item) %}\
        "${item3.CODE}": (${coefficients(name, item2, item3)}),
{% end %}
    },
{% end %}
  },
{% end %}
}
